(()=>{var r={426:(r,n,e)=>{"use strict";e.d(n,{Z:()=>p});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),s=e(667),A=e.n(s),c=new URL(e(843),e.b),d=i()(o());d.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Mochiy+Pop+One&display=swap);"]);var l=A()(c);d.push([r.id,"html {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n*, *:before, *:after {\r\n    box-sizing: inherit;\r\n}\r\n  \r\nbody {\r\n    font-family: sans-serif;\r\n    margin: 0;\r\n    background-image: linear-gradient(260deg, #4e88ae 0%, #ca99d3 100%);\r\n}\r\n\r\nh1{\r\n    font-family: 'Mochiy Pop One', sans-serif;\r\n    font-size: 2.8rem;\r\n    text-align: center;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    text-shadow: 5px 5px 6px #0000009e;\r\n}\r\n\r\nh2{\r\n    font-size: 1rem;\r\n    margin: 2rem;\r\n    font-weight: 500;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n \r\nbutton{\r\n    color:white;\r\n    font-weight: 100;\r\n    letter-spacing: 2px;\r\n    text-decoration: none;\r\n    background:rgba(0,0,0,0.2);\r\n    padding:20px 35px;\r\n    border: none;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n    transition:all 0.2s;\r\n    cursor: pointer;\r\n    border-top: 3px solid #0000002c;\r\n    border-right: 3px solid #3a3a3a;\r\n    border-bottom: 3px solid #3a3a3a;\r\n    border-left: 3px solid #0000002c;\r\n    border-radius: 1px;\r\n}\r\n\r\nbutton:hover {\r\n    background:rgba(0,0,0,0.3);\r\n    border-top: 4px solid #0000002c;\r\n    border-right: 4px solid #3a3a3a;\r\n    border-bottom: 4px solid #3a3a3a;\r\n    border-left: 4px solid #0000002c;\r\n  }\r\n\r\n\r\n  svg{\r\n    color: #000;\r\n  }\r\n\r\n.overlay{\r\n    background-color: #00000066;\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    bottom: 0;\r\n}\r\n\r\n.start-screen{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-image: linear-gradient(260deg, #4e88ae 0%, #ca99d3 100%);\r\n    padding: 3rem;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    box-shadow: 0px 0px 12px #000000a4;\r\n    text-align: center;\r\n}\r\n\r\n.start-screen #setup-board{\r\n    /* margin: 3rem; */\r\n    width: 220px;\r\n    height: 220px;\r\n    \r\n}\r\n\r\n.start-screen .button-container{\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n}\r\n.start-screen .button-container > button {\r\n    width: 135px;\r\n    padding: .7rem 2rem;\r\n}\r\n\r\n.start-screen .ships{\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: inline-flex;\r\n}\r\n\r\n.ship-part{\r\n    background-color: #ffffffa3;\r\n    padding: 10px;\r\n    border: 1px solid #000000c1;\r\n    width: 10px;\r\n}\r\n\r\n.ship-part-on-board{\r\n    background-color: #ffffffa3 !important; \r\n    border: 1px solid #000000c1 !important;\r\n}\r\n\r\n.ships{\r\n    cursor: grab;\r\n}\r\n\r\n.dragging:active{\r\n    cursor: grabbing\r\n}\r\n\r\n\r\n.container{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-bottom: 3rem;\r\n } \r\n\r\n\r\n.board-container{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    padding:50px 0;\r\n    gap: 7rem;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.board{\r\n    height: 350px;\r\n    width: 350px;\r\n    border: 1px solid #000;\r\n    background-color: rgba(0,0,0,0.2);;\r\n    border-top: 3px solid #0000002c;\r\n    border-right: 3px solid #3a3a3a;\r\n    border-bottom: 3px solid #3a3a3a;\r\n    border-left: 3px solid #0000002c;\r\n    border-radius: 1px;\r\n\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 1fr);\r\n    grid-template-rows: repeat(10, 1fr);\r\n}\r\n\r\n\r\n.created-by{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.position{\r\n    background-color: #00000075;\r\n    padding: 10px;\r\n    border: 1px solid #ffffffae;\r\n    width: 100%;\r\n    \r\n}\r\n\r\n#board-cpu .position:hover{\r\n    color: #fff;\r\n    background: url("+l+");\r\n    background-color: #ffffff75;\r\n}\r\n\r\n.position.there-is-ship{\r\n    background-color: rgb(69, 179, 69);\r\n}\r\n\r\n.position.miss{\r\n    background-color: #72727247;\r\n}\r\n\r\n.position.hit{\r\n    background: rgb(194, 37, 37);\r\n    box-shadow:inset 0px 0px 0px 5px rgba(33, 33, 33, 0.792);\r\n    \r\n\r\n}\r\n\r\n.col {\r\n    flex-direction: column;\r\n}\r\n\r\n\r\n.hide {\r\n    display: none;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,sBAAsB;EACxB;;AAEF;IACI,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,SAAS;IACT,mEAAmE;AACvE;;AAEA;IACI,yCAAyC;IACzC,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,yBAAyB;IACzB,kCAAkC;AACtC;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,gBAAgB;IAChB,qGAAqG;AACzG;;AAEA;IACI,WAAW;IACX,gBAAgB;IAChB,mBAAmB;IACnB,qBAAqB;IACrB,0BAA0B;IAC1B,iBAAiB;IACjB,YAAY;IACZ,yBAAyB;IACzB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;IACf,+BAA+B;IAC/B,+BAA+B;IAC/B,gCAAgC;IAChC,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,+BAA+B;IAC/B,+BAA+B;IAC/B,gCAAgC;IAChC,gCAAgC;EAClC;;;EAGA;IACE,WAAW;EACb;;AAEF;IACI,2BAA2B;IAC3B,eAAe;IACf,WAAW;IACX,YAAY;IACZ,MAAM;IACN,SAAS;AACb;;AAEA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,mEAAmE;IACnE,aAAa;IACb,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kCAAkC;IAClC,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;;AAEjB;;AAEA;IACI,aAAa;IACb,SAAS;;AAEb;AACA;IACI,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,oBAAoB;AACxB;;AAEA;IACI,2BAA2B;IAC3B,aAAa;IACb,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,sCAAsC;IACtC,sCAAsC;AAC1C;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI;AACJ;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,oBAAoB;CACvB;;;AAGD;IACI,aAAa;IACb,WAAW;IACX,uBAAuB;IACvB,cAAc;IACd,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,sBAAsB;IACtB,iCAAiC;IACjC,+BAA+B;IAC/B,+BAA+B;IAC/B,gCAAgC;IAChC,gCAAgC;IAChC,kBAAkB;;IAElB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;;AAGA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;AAEvB;;AAEA;IACI,2BAA2B;IAC3B,aAAa;IACb,2BAA2B;IAC3B,WAAW;;AAEf;;AAEA;IACI,WAAW;IACX,mDAAqC;IACrC,2BAA2B;AAC/B;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4BAA4B;IAC5B,wDAAwD;;;AAG5D;;AAEA;IACI,sBAAsB;AAC1B;;;AAGA;IACI,aAAa;AACjB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Mochiy+Pop+One&display=swap');\r\n\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n*, *:before, *:after {\r\n    box-sizing: inherit;\r\n}\r\n  \r\nbody {\r\n    font-family: sans-serif;\r\n    margin: 0;\r\n    background-image: linear-gradient(260deg, #4e88ae 0%, #ca99d3 100%);\r\n}\r\n\r\nh1{\r\n    font-family: 'Mochiy Pop One', sans-serif;\r\n    font-size: 2.8rem;\r\n    text-align: center;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    text-shadow: 5px 5px 6px #0000009e;\r\n}\r\n\r\nh2{\r\n    font-size: 1rem;\r\n    margin: 2rem;\r\n    font-weight: 500;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n \r\nbutton{\r\n    color:white;\r\n    font-weight: 100;\r\n    letter-spacing: 2px;\r\n    text-decoration: none;\r\n    background:rgba(0,0,0,0.2);\r\n    padding:20px 35px;\r\n    border: none;\r\n    text-transform: uppercase;\r\n    font-weight: 600;\r\n    transition:all 0.2s;\r\n    cursor: pointer;\r\n    border-top: 3px solid #0000002c;\r\n    border-right: 3px solid #3a3a3a;\r\n    border-bottom: 3px solid #3a3a3a;\r\n    border-left: 3px solid #0000002c;\r\n    border-radius: 1px;\r\n}\r\n\r\nbutton:hover {\r\n    background:rgba(0,0,0,0.3);\r\n    border-top: 4px solid #0000002c;\r\n    border-right: 4px solid #3a3a3a;\r\n    border-bottom: 4px solid #3a3a3a;\r\n    border-left: 4px solid #0000002c;\r\n  }\r\n\r\n\r\n  svg{\r\n    color: #000;\r\n  }\r\n\r\n.overlay{\r\n    background-color: #00000066;\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    bottom: 0;\r\n}\r\n\r\n.start-screen{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-image: linear-gradient(260deg, #4e88ae 0%, #ca99d3 100%);\r\n    padding: 3rem;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    box-shadow: 0px 0px 12px #000000a4;\r\n    text-align: center;\r\n}\r\n\r\n.start-screen #setup-board{\r\n    /* margin: 3rem; */\r\n    width: 220px;\r\n    height: 220px;\r\n    \r\n}\r\n\r\n.start-screen .button-container{\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n}\r\n.start-screen .button-container > button {\r\n    width: 135px;\r\n    padding: .7rem 2rem;\r\n}\r\n\r\n.start-screen .ships{\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: inline-flex;\r\n}\r\n\r\n.ship-part{\r\n    background-color: #ffffffa3;\r\n    padding: 10px;\r\n    border: 1px solid #000000c1;\r\n    width: 10px;\r\n}\r\n\r\n.ship-part-on-board{\r\n    background-color: #ffffffa3 !important; \r\n    border: 1px solid #000000c1 !important;\r\n}\r\n\r\n.ships{\r\n    cursor: grab;\r\n}\r\n\r\n.dragging:active{\r\n    cursor: grabbing\r\n}\r\n\r\n\r\n.container{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-bottom: 3rem;\r\n } \r\n\r\n\r\n.board-container{\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    padding:50px 0;\r\n    gap: 7rem;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.board{\r\n    height: 350px;\r\n    width: 350px;\r\n    border: 1px solid #000;\r\n    background-color: rgba(0,0,0,0.2);;\r\n    border-top: 3px solid #0000002c;\r\n    border-right: 3px solid #3a3a3a;\r\n    border-bottom: 3px solid #3a3a3a;\r\n    border-left: 3px solid #0000002c;\r\n    border-radius: 1px;\r\n\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 1fr);\r\n    grid-template-rows: repeat(10, 1fr);\r\n}\r\n\r\n\r\n.created-by{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.position{\r\n    background-color: #00000075;\r\n    padding: 10px;\r\n    border: 1px solid #ffffffae;\r\n    width: 100%;\r\n    \r\n}\r\n\r\n#board-cpu .position:hover{\r\n    color: #fff;\r\n    background: url('crosshairs-gps.svg');\r\n    background-color: #ffffff75;\r\n}\r\n\r\n.position.there-is-ship{\r\n    background-color: rgb(69, 179, 69);\r\n}\r\n\r\n.position.miss{\r\n    background-color: #72727247;\r\n}\r\n\r\n.position.hit{\r\n    background: rgb(194, 37, 37);\r\n    box-shadow:inset 0px 0px 0px 5px rgba(33, 33, 33, 0.792);\r\n    \r\n\r\n}\r\n\r\n.col {\r\n    flex-direction: column;\r\n}\r\n\r\n\r\n.hide {\r\n    display: none;\r\n}"],sourceRoot:""}]);const p=d},645:r=>{"use strict";r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<r.length;c++){var d=[].concat(r[c]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},667:r=>{"use strict";r.exports=function(r,n){return n||(n={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),n.hash&&(r+=n.hash),/["'() \t\n]|(%20)/.test(r)||n.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{"use strict";r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:r=>{"use strict";var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var a={},i=[],s=0;s<r.length;s++){var A=r[s],c=t.base?A[0]+t.base:A[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var p=e(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=o(u,t);t.byIndex=s,n.splice(s,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=e(a[i]);n[s].references--}for(var A=t(r,o),c=0;c<a.length;c++){var d=e(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=A}}},569:r=>{"use strict";var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:r=>{"use strict";r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{"use strict";r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{"use strict";r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{"use strict";r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},642:(r,n,e)=>{"use strict";e.r(n),e.d(n,{boardCPUDOM:()=>d,boardCoordinate:()=>x,boardPlayerDOM:()=>c,createBoard:()=>B,createSetupBoard:()=>C,displayDragShips:()=>m,gameWonBy:()=>v,leftBoardAttack:()=>y,ships:()=>h});var t=e(417);const o=document.getElementById("start-game"),a=document.querySelector(".random-btn"),i=document.querySelector(".start-btn"),s=document.querySelector(".start-screen"),A=document.querySelector(".overlay"),c=document.getElementById("board-player"),d=document.getElementById("board-cpu"),l=document.getElementById("setup-board"),p=document.querySelector(".ships"),u=[c,d];let f,g,h=[5,4,3,2,1];o.addEventListener("click",(()=>{s.classList.remove("hide"),A.classList.remove("hide"),(0,t.wo)()}));const b=()=>{i.addEventListener("click",(()=>{s.classList.add("hide"),A.classList.add("hide"),(0,t.t)()}))};a.addEventListener("click",(()=>{(0,t.KY)(),b()})),l.addEventListener("dragover",(r=>{r.preventDefault()})),l.addEventListener("dragleave",(r=>{r.preventDefault()})),p.addEventListener("dragend",(()=>{if(console.log((0,t.bf)()),null!=f){let[r,n]=f.split("-");r=parseInt(r),n=parseInt(n),g=p.classList.contains("col")?"h":"v",console.log(g),(0,t.bf)(r,n,g,h[0])&&((0,t.ZW)(r,n,g,h[0]),h.shift(),m(),0===h.length&&b())}})),l.addEventListener("dragenter",(r=>{r.target.classList.contains("ship-part-on-board")?(f=null,g=null):(f=r.target.dataset.coords,g=r.target.classList)})),p.addEventListener("dragstart",(r=>{r.target.classList.add("dragging"),console.log("you picked me up!")})),p.addEventListener("mouseup",(()=>{p.classList.toggle("col")}));const m=()=>{p.innerHTML="";for(let r=0;r<h[0];r++){let r=document.createElement("div");r.classList.add("ship-part"),p.appendChild(r)}},C=r=>{l.innerHTML="",r.forEach(((r,n)=>{r.forEach(((r,e)=>{let t=document.createElement("div");t.classList.add("position"),!0===r&&t.classList.add("ship-part-on-board"),t.setAttribute("data-coords",`${n}-${e}`),l.appendChild(t)}))}))},B=r=>{u.forEach(((n,e)=>{n.innerHTML="",console.log(r),r[e].forEach(((r,t)=>{r.forEach(((r,o)=>{let a=document.createElement("div");a.classList.add("position"),0===e&&!0===r&&a.classList.add("there-is-ship"),a.setAttribute("data-coords",`${t}-${o}`),n.appendChild(a)}))}))}))};let I=document.querySelectorAll("#board-cpu .position");const x=r=>{I=document.querySelectorAll("#board-cpu .position"),I.forEach((r=>{r.addEventListener("click",(()=>(r=>{let n=r.dataset.coords.split("-");r.classList.contains("hit")||r.classList.contains("miss")||("hit"===(0,t.ug)(n)?r.classList.add("hit"):r.classList.add("miss"),(0,t.V)())})(r)))}))},y=(r,n,e)=>{const t=[...document.querySelectorAll("#board-player .position")].find((r=>r.dataset.coords===`${n}-${e}`));"hit"===r?t.classList.add("hit"):t.classList.add("miss")},v=r=>{alert(`${r} won the game`)}},417:(r,n,e)=>{"use strict";e.d(n,{KY:()=>C,V:()=>I,ZW:()=>b,bf:()=>m,t:()=>B,ug:()=>y,wo:()=>h});const{createBoard:t,boardCoordinate:o,leftBoardAttack:a,gameWonBy:i,createSetupBoard:s,displayDragShips:A,ships:c}=e(642),d=e(498),l=e(507);let p=!1;const u=d(),f=d(),g=(l(f),l(u));A(),s(u.board);const h=()=>{c=[5,4,3,2,1];const r=d(),n=d();l(n),l(r),A(),s(r.board)},b=(r,n,e,t)=>{u.placeShip(r,n,e,t),s(u.board)},m=(r,n,e,t)=>(console.log(u.board),!!u.checkBoard(r,n,e,t)),C=()=>{u.boardReset(),u.randomShips(),s(u.board)},B=()=>{f.randomShips(),t([u.board,f.board]),o(f)},I=()=>{!0===f.allSunk()?(console.log("Player won"),i("You"),p=!0):!0===u.allSunk()&&(console.log("CPU won"),i("Computer"),p=!0),x()},x=()=>{if(!p){let{result:r,x:n,y:e}=g.attack();a(r,n,e)}},y=r=>{let[n,e]=r;return f.receiveAttack(n,e)}},498:(r,n,e)=>{const t=e(643);r.exports=()=>{const r=[],n=(()=>{const r=[];for(let n=0;n<10;n++){const n=[];r.push(n);for(let r=0;r<10;r++)n.push(!1)}return r})();function e(e,a,i,s){const A=t(s);if(o(e,a,i,s)){if("h"===i)for(let r=e;r<e+s;r++)n[r][a]=!0,A.coords.push([r,a]);else{if("v"!==i)return!1;for(let r=a;r<a+s;r++)n[e][r]=!0,A.coords.push([e,r])}r.push(A)}return this}const o=(r,e,t,o)=>{if("empty"===r){for(let r=0;r<=9;r++)for(let e=0;e<=9;e++)if(0==!n[r][e])return!1;return!0}if(!((r,n,e,t)=>!("h"===e&&r+t>10||"v"===e&&n+t>10))(r,e,t,o))return!1;if(!((r,e,t,o)=>{if("h"===t){for(let t=r;t<r+o;t++)if(!0===n[t][e])return!1}else if("v"===t)for(let t=e;t<e+o;t++)if(!0===n[r][t])return!1;return!0})(r,e,t,o))return!1;if("h"===t){for(let t=r;t<r+o;t++)n[t][e];return!0}if("v"===t)for(let t=e;t<e+o;t++)n[r][t];return!0};return{allSunk:function(){let n=!0;return r.forEach((r=>{!1===r.isSunk()&&(n=!1)})),n},board:n,boardReset:function(){for(let r=0;r<10;r++)for(let e=0;e<10;e++)n[r][e]=!1},checkBoard:o,placeShip:e,receiveAttack:function(e,t){return!0===n[e][t]?(r.forEach((r=>{r.coords.forEach((n=>{n[0]==e&&n[1]==t&&r.hit()}))})),n[e][t]="hit","hit"):!1===n[e][t]?(n[e][t]="miss","miss"):void 0},randomShips:function(){let r,n,t;const a=["h","v"],i=[1,2,3,4,5];for(let s=0;s<i.length;s++){do{r=Math.floor(10*Math.random()),n=Math.floor(10*Math.random()),t=Math.floor(2*Math.random())}while(!o(r,n,a[t],i[s]));e(r,n,a[t],i[s])}}}}},507:r=>{r.exports=r=>{const n=(()=>{const r=[];for(let n=0;n<10;n++)for(let e=0;e<10;e++)r.push([n,e]);return r})();let e,t,o;return{attacksAvailable:()=>n.length,attack:(a=(()=>{if("hit"===e){const r=[];t>0&&r.push([t-1,o]),t<9&&r.push([t+1,o]),o>0&&r.push([t,o-1]),o<9&&r.push([t,o+1]);const e=r.filter((r=>{const[e,t]=r;return n.some((r=>r[0]===e&&r[1]===t))}));if(e.length>0){const[r,t]=e[Math.floor(Math.random()*e.length)];return n.findIndex((n=>n[0]===r&&n[1]===t))}}return Math.floor(Math.random()*n.length)})())=>([t,o]=n.splice(a,1)[0],e=r.receiveAttack(t,o),{result:e,x:t,y:o})}}},643:r=>{r.exports=r=>{let n=!1;return{timesHit:0,sunk:n,shipLength:r,hit:function(){return this.timesHit++,this},isSunk:function(){return r===this.timesHit&&(n=!0,!0)},coords:[]}}},843:(r,n,e)=>{"use strict";r.exports=e.p+"789235ac09c9e337b730.svg"}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return r[t](a,a.exports,e),a.exports}e.m=r,e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),e.r=r=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},(()=>{var r;e.g.importScripts&&(r=e.g.location+"");var n=e.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var t=n.getElementsByTagName("script");t.length&&(r=t[t.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=r})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";e(417);var r=e(379),n=e.n(r),t=e(795),o=e.n(t),a=e(569),i=e.n(a),s=e(565),A=e.n(s),c=e(216),d=e.n(c),l=e(589),p=e.n(l),u=e(426),f={};f.styleTagTransform=p(),f.setAttributes=A(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBT0MsZUFBZTVOLEVBQVN1TyxPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RkLE9BQU9DLGVBQWU1TixFQUFTLGFBQWMsQ0FBRXlPLE9BQU8sR0FBTyxFLE1DTDlELElBQUlDLEVBQ0ExQixFQUFvQmUsRUFBRVksZ0JBQWVELEVBQVkxQixFQUFvQmUsRUFBRWEsU0FBVyxJQUN0RixJQUFJakssRUFBV3FJLEVBQW9CZSxFQUFFcEosU0FDckMsSUFBSytKLEdBQWEvSixJQUNiQSxFQUFTa0ssZ0JBQ1pILEVBQVkvSixFQUFTa0ssY0FBY0MsTUFDL0JKLEdBQVcsQ0FDZixJQUFJSyxFQUFVcEssRUFBU3FLLHFCQUFxQixVQUN6Q0QsRUFBUXJPLFNBQVFnTyxFQUFZSyxFQUFRQSxFQUFRck8sT0FBUyxHQUFHb08sSUFDNUQsQ0FJRCxJQUFLSixFQUFXLE1BQU0sSUFBSXZKLE1BQU0seURBQ2hDdUosRUFBWUEsRUFBVTNNLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGaUwsRUFBb0JpQyxFQUFJUCxDLEtDZnhCMUIsRUFBb0JrQyxFQUFJdkssU0FBU3dLLFNBQVdDLEtBQUtSLFNBQVNTLEtDQTFEckMsRUFBb0JzQyxRQUFLcE8sRSxtSkNXckJLLEVBQVUsQ0FBQyxFQUVmQSxFQUFRc0Usa0JBQW9CLElBQzVCdEUsRUFBUWdFLGNBQWdCLElBRWxCaEUsRUFBUWdELE9BQVMsU0FBYyxLQUFNLFFBRTNDaEQsRUFBUXFDLE9BQVMsSUFDakJyQyxFQUFRcUUsbUJBQXFCLElBRWhCLElBQUksSUFBU3JFLEdBS0osS0FBVyxZQUFpQixVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kaXNwbGF5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCJjcm9zc2hhaXJzLWdwcy5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1vY2hpeStQb3ArT25lJmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJodG1sIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXHJcXG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcXHJcXG59XFxyXFxuICBcXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDI2MGRlZywgIzRlODhhZSAwJSwgI2NhOTlkMyAxMDAlKTtcXHJcXG59XFxyXFxuXFxyXFxuaDF7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnTW9jaGl5IFBvcCBPbmUnLCBzYW5zLXNlcmlmO1xcclxcbiAgICBmb250LXNpemU6IDIuOHJlbTtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgdGV4dC1zaGFkb3c6IDVweCA1cHggNnB4ICMwMDAwMDA5ZTtcXHJcXG59XFxyXFxuXFxyXFxuaDJ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgbWFyZ2luOiAycmVtO1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG59XFxyXFxuIFxcclxcbmJ1dHRvbntcXHJcXG4gICAgY29sb3I6d2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XFxyXFxuICAgIGxldHRlci1zcGFjaW5nOiAycHg7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuMik7XFxyXFxuICAgIHBhZGRpbmc6MjBweCAzNXB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICAgIHRyYW5zaXRpb246YWxsIDAuMnM7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICMwMDAwMDAyYztcXHJcXG4gICAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMzYTNhM2E7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxcHg7XFxyXFxufVxcclxcblxcclxcbmJ1dHRvbjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQ6cmdiYSgwLDAsMCwwLjMpO1xcclxcbiAgICBib3JkZXItdG9wOiA0cHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDRweCBzb2xpZCAjM2EzYTNhO1xcclxcbiAgICBib3JkZXItYm90dG9tOiA0cHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjMDAwMDAwMmM7XFxyXFxuICB9XFxyXFxuXFxyXFxuXFxyXFxuICBzdmd7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbiAgfVxcclxcblxcclxcbi5vdmVybGF5e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwNjY7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgdG9wOiAwO1xcclxcbiAgICBib3R0b206IDA7XFxyXFxufVxcclxcblxcclxcbi5zdGFydC1zY3JlZW57XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgdG9wOiA1MCU7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgyNjBkZWcsICM0ZTg4YWUgMCUsICNjYTk5ZDMgMTAwJSk7XFxyXFxuICAgIHBhZGRpbmc6IDNyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAxMnB4ICMwMDAwMDBhNDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc3RhcnQtc2NyZWVuICNzZXR1cC1ib2FyZHtcXHJcXG4gICAgLyogbWFyZ2luOiAzcmVtOyAqL1xcclxcbiAgICB3aWR0aDogMjIwcHg7XFxyXFxuICAgIGhlaWdodDogMjIwcHg7XFxyXFxuICAgIFxcclxcbn1cXHJcXG5cXHJcXG4uc3RhcnQtc2NyZWVuIC5idXR0b24tY29udGFpbmVye1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6IDJyZW07XFxyXFxuXFxyXFxufVxcclxcbi5zdGFydC1zY3JlZW4gLmJ1dHRvbi1jb250YWluZXIgPiBidXR0b24ge1xcclxcbiAgICB3aWR0aDogMTM1cHg7XFxyXFxuICAgIHBhZGRpbmc6IC43cmVtIDJyZW07XFxyXFxufVxcclxcblxcclxcbi5zdGFydC1zY3JlZW4gLnNoaXBze1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxyXFxufVxcclxcblxcclxcbi5zaGlwLXBhcnR7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmZhMztcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMGMxO1xcclxcbiAgICB3aWR0aDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXAtcGFydC1vbi1ib2FyZHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZmEzICFpbXBvcnRhbnQ7IFxcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwYzEgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXBze1xcclxcbiAgICBjdXJzb3I6IGdyYWI7XFxyXFxufVxcclxcblxcclxcbi5kcmFnZ2luZzphY3RpdmV7XFxyXFxuICAgIGN1cnNvcjogZ3JhYmJpbmdcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW07XFxyXFxuIH0gXFxyXFxuXFxyXFxuXFxyXFxuLmJvYXJkLWNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOjUwcHggMDtcXHJcXG4gICAgZ2FwOiA3cmVtO1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxufVxcclxcblxcclxcbi5ib2FyZHtcXHJcXG4gICAgaGVpZ2h0OiAzNTBweDtcXHJcXG4gICAgd2lkdGg6IDM1MHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMik7O1xcclxcbiAgICBib3JkZXItdG9wOiAzcHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjM2EzYTNhO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjMDAwMDAwMmM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDFweDtcXHJcXG5cXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uY3JlYXRlZC1ieXtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5wb3NpdGlvbntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDc1O1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmYWU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxuI2JvYXJkLWNwdSAucG9zaXRpb246aG92ZXJ7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmNzU7XFxyXFxufVxcclxcblxcclxcbi5wb3NpdGlvbi50aGVyZS1pcy1zaGlwe1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjksIDE3OSwgNjkpO1xcclxcbn1cXHJcXG5cXHJcXG4ucG9zaXRpb24ubWlzc3tcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcyNzI3MjQ3O1xcclxcbn1cXHJcXG5cXHJcXG4ucG9zaXRpb24uaGl0e1xcclxcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTk0LCAzNywgMzcpO1xcclxcbiAgICBib3gtc2hhZG93Omluc2V0IDBweCAwcHggMHB4IDVweCByZ2JhKDMzLCAzMywgMzMsIDAuNzkyKTtcXHJcXG4gICAgXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5jb2wge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uaGlkZSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7SUFDSSxzQkFBc0I7RUFDeEI7O0FBRUY7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsU0FBUztJQUNULG1FQUFtRTtBQUN2RTs7QUFFQTtJQUNJLHlDQUF5QztJQUN6QyxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIscUdBQXFHO0FBQ3pHOztBQUVBO0lBQ0ksV0FBVztJQUNYLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLDBCQUEwQjtJQUMxQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZiwrQkFBK0I7SUFDL0IsK0JBQStCO0lBQy9CLGdDQUFnQztJQUNoQyxnQ0FBZ0M7SUFDaEMsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IsZ0NBQWdDO0lBQ2hDLGdDQUFnQztFQUNsQzs7O0VBR0E7SUFDRSxXQUFXO0VBQ2I7O0FBRUY7SUFDSSwyQkFBMkI7SUFDM0IsZUFBZTtJQUNmLFdBQVc7SUFDWCxZQUFZO0lBQ1osTUFBTTtJQUNOLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULGdDQUFnQztJQUNoQyxtRUFBbUU7SUFDbkUsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixrQ0FBa0M7SUFDbEMsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhOztBQUVqQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixTQUFTOztBQUViO0FBQ0E7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0IsYUFBYTtJQUNiLDJCQUEyQjtJQUMzQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxzQ0FBc0M7SUFDdEMsc0NBQXNDO0FBQzFDOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJO0FBQ0o7OztBQUdBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsb0JBQW9CO0NBQ3ZCOzs7QUFHRDtJQUNJLGFBQWE7SUFDYixXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLGNBQWM7SUFDZCxTQUFTO0lBQ1QsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlDQUFpQztJQUNqQywrQkFBK0I7SUFDL0IsK0JBQStCO0lBQy9CLGdDQUFnQztJQUNoQyxnQ0FBZ0M7SUFDaEMsa0JBQWtCOztJQUVsQixhQUFhO0lBQ2Isc0NBQXNDO0lBQ3RDLG1DQUFtQztBQUN2Qzs7O0FBR0E7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjs7QUFFdkI7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0IsYUFBYTtJQUNiLDJCQUEyQjtJQUMzQixXQUFXOztBQUVmOztBQUVBO0lBQ0ksV0FBVztJQUNYLG1EQUFxQztJQUNyQywyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSw0QkFBNEI7SUFDNUIsd0RBQXdEOzs7QUFHNUQ7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7OztBQUdBO0lBQ0ksYUFBYTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Nb2NoaXkrUG9wK09uZSZkaXNwbGF5PXN3YXAnKTtcXHJcXG5cXHJcXG5odG1sIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXHJcXG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcXHJcXG59XFxyXFxuICBcXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDI2MGRlZywgIzRlODhhZSAwJSwgI2NhOTlkMyAxMDAlKTtcXHJcXG59XFxyXFxuXFxyXFxuaDF7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnTW9jaGl5IFBvcCBPbmUnLCBzYW5zLXNlcmlmO1xcclxcbiAgICBmb250LXNpemU6IDIuOHJlbTtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgdGV4dC1zaGFkb3c6IDVweCA1cHggNnB4ICMwMDAwMDA5ZTtcXHJcXG59XFxyXFxuXFxyXFxuaDJ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgbWFyZ2luOiAycmVtO1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG59XFxyXFxuIFxcclxcbmJ1dHRvbntcXHJcXG4gICAgY29sb3I6d2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XFxyXFxuICAgIGxldHRlci1zcGFjaW5nOiAycHg7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuMik7XFxyXFxuICAgIHBhZGRpbmc6MjBweCAzNXB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICAgIHRyYW5zaXRpb246YWxsIDAuMnM7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICMwMDAwMDAyYztcXHJcXG4gICAgYm9yZGVyLXJpZ2h0OiAzcHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMzYTNhM2E7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxcHg7XFxyXFxufVxcclxcblxcclxcbmJ1dHRvbjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQ6cmdiYSgwLDAsMCwwLjMpO1xcclxcbiAgICBib3JkZXItdG9wOiA0cHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDRweCBzb2xpZCAjM2EzYTNhO1xcclxcbiAgICBib3JkZXItYm90dG9tOiA0cHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjMDAwMDAwMmM7XFxyXFxuICB9XFxyXFxuXFxyXFxuXFxyXFxuICBzdmd7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbiAgfVxcclxcblxcclxcbi5vdmVybGF5e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwNjY7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgdG9wOiAwO1xcclxcbiAgICBib3R0b206IDA7XFxyXFxufVxcclxcblxcclxcbi5zdGFydC1zY3JlZW57XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgdG9wOiA1MCU7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgyNjBkZWcsICM0ZTg4YWUgMCUsICNjYTk5ZDMgMTAwJSk7XFxyXFxuICAgIHBhZGRpbmc6IDNyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDBweCAxMnB4ICMwMDAwMDBhNDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc3RhcnQtc2NyZWVuICNzZXR1cC1ib2FyZHtcXHJcXG4gICAgLyogbWFyZ2luOiAzcmVtOyAqL1xcclxcbiAgICB3aWR0aDogMjIwcHg7XFxyXFxuICAgIGhlaWdodDogMjIwcHg7XFxyXFxuICAgIFxcclxcbn1cXHJcXG5cXHJcXG4uc3RhcnQtc2NyZWVuIC5idXR0b24tY29udGFpbmVye1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBnYXA6IDJyZW07XFxyXFxuXFxyXFxufVxcclxcbi5zdGFydC1zY3JlZW4gLmJ1dHRvbi1jb250YWluZXIgPiBidXR0b24ge1xcclxcbiAgICB3aWR0aDogMTM1cHg7XFxyXFxuICAgIHBhZGRpbmc6IC43cmVtIDJyZW07XFxyXFxufVxcclxcblxcclxcbi5zdGFydC1zY3JlZW4gLnNoaXBze1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxyXFxufVxcclxcblxcclxcbi5zaGlwLXBhcnR7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmZhMztcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMGMxO1xcclxcbiAgICB3aWR0aDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXAtcGFydC1vbi1ib2FyZHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZmEzICFpbXBvcnRhbnQ7IFxcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwYzEgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXBze1xcclxcbiAgICBjdXJzb3I6IGdyYWI7XFxyXFxufVxcclxcblxcclxcbi5kcmFnZ2luZzphY3RpdmV7XFxyXFxuICAgIGN1cnNvcjogZ3JhYmJpbmdcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW07XFxyXFxuIH0gXFxyXFxuXFxyXFxuXFxyXFxuLmJvYXJkLWNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOjUwcHggMDtcXHJcXG4gICAgZ2FwOiA3cmVtO1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxufVxcclxcblxcclxcbi5ib2FyZHtcXHJcXG4gICAgaGVpZ2h0OiAzNTBweDtcXHJcXG4gICAgd2lkdGg6IDM1MHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMik7O1xcclxcbiAgICBib3JkZXItdG9wOiAzcHggc29saWQgIzAwMDAwMDJjO1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjM2EzYTNhO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzNhM2EzYTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjMDAwMDAwMmM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDFweDtcXHJcXG5cXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uY3JlYXRlZC1ieXtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5wb3NpdGlvbntcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDc1O1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmYWU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxuI2JvYXJkLWNwdSAucG9zaXRpb246aG92ZXJ7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJ2Nyb3NzaGFpcnMtZ3BzLnN2ZycpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmNzU7XFxyXFxufVxcclxcblxcclxcbi5wb3NpdGlvbi50aGVyZS1pcy1zaGlwe1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjksIDE3OSwgNjkpO1xcclxcbn1cXHJcXG5cXHJcXG4ucG9zaXRpb24ubWlzc3tcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcyNzI3MjQ3O1xcclxcbn1cXHJcXG5cXHJcXG4ucG9zaXRpb24uaGl0e1xcclxcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTk0LCAzNywgMzcpO1xcclxcbiAgICBib3gtc2hhZG93Omluc2V0IDBweCAwcHggMHB4IDVweCByZ2JhKDMzLCAzMywgMzMsIDAuNzkyKTtcXHJcXG4gICAgXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5jb2wge1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uaGlkZSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgeyBjaGVja1Bvc2l0aW9uLCBnYW1lTG9vcCwgbmV3R2FtZSwgcGxhY2VTaGlwUmFuZG9tLCBwbGF5Q1BVLCBwbGF5UGxheWVyLCBzZXR1cFRoZUdhbWUsIHN0YXJ0R2FtZSB9IGZyb20gXCIuL2dhbWVcIlxyXG5cclxuY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydC1nYW1lJylcclxuXHJcbmNvbnN0IHJhbmRvbUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yYW5kb20tYnRuJylcclxuY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhcnQtYnRuJylcclxuXHJcbmNvbnN0IHN0YXJ0U2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YXJ0LXNjcmVlbicpXHJcbmNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpXHJcblxyXG5leHBvcnQgY29uc3QgYm9hcmRQbGF5ZXJET00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm9hcmQtcGxheWVyJylcclxuZXhwb3J0IGNvbnN0IGJvYXJkQ1BVRE9NID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkLWNwdScpXHJcbmNvbnN0IHNldHVwQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dXAtYm9hcmQnKVxyXG5cclxuY29uc3QgZHJhZ2dlZFNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBzJylcclxuXHJcbmNvbnN0IGJvYXJkc0FsbERPTSA9IFtib2FyZFBsYXllckRPTSwgYm9hcmRDUFVET01dXHJcblxyXG5leHBvcnQgbGV0IHNoaXBzID0gWzUsNCwzLDIsMV1cclxubGV0IGRyYWdBbmREcm9wQ29vcmRzIFxyXG5sZXQgZHJhZ0FuZERyb3BEaXJlY3Rpb25cclxuXHJcbm5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgc3RhcnRTY3JlZW4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpXHJcbiAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcclxuICBuZXdHYW1lKClcclxufSlcclxuXHJcbmNvbnN0IG1ha2VTdGFydEJ0bkF2YWlsYWJsZSA9ICgpID0+IHtcclxuICBzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHN0YXJ0U2NyZWVuLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxyXG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdoaWRlJylcclxuICAgIHN0YXJ0R2FtZSgpXHJcbiAgfSlcclxuXHJcbn1cclxuXHJcbnJhbmRvbUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBwbGFjZVNoaXBSYW5kb20oKVxyXG4gIG1ha2VTdGFydEJ0bkF2YWlsYWJsZSgpXHJcbn0pXHJcblxyXG5cclxuc2V0dXBCb2FyZC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGUpID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbn0pO1xyXG5cclxuc2V0dXBCb2FyZC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG59KTtcclxuXHJcbmRyYWdnZWRTaGlwcy5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGNoZWNrUG9zaXRpb24oKSlcclxuICBpZihkcmFnQW5kRHJvcENvb3JkcyAhPSBudWxsKXtcclxuICAgIGxldCBbeCx5XSAgPSBkcmFnQW5kRHJvcENvb3Jkcy5zcGxpdCgnLScpXHJcbiAgICB4ID0gcGFyc2VJbnQoeClcclxuICAgIHkgPSBwYXJzZUludCh5KVxyXG4gIFxyXG4gICAgLy9sb2dpYyBnb2VzIGEgYml0IHdpZXJkIGhlcmUsIG9wb3NpdGUgbGV0cyBzYXksIGJ1dCBpbiB0aGUgZ2FtZSB3b3JrcyB3ZWxsXHJcbiAgICBpZighZHJhZ2dlZFNoaXBzLmNsYXNzTGlzdC5jb250YWlucygnY29sJykpe1xyXG4gICAgICBkcmFnQW5kRHJvcERpcmVjdGlvbiA9ICd2J1xyXG4gICAgfSBlbHNlIGRyYWdBbmREcm9wRGlyZWN0aW9uID0gJ2gnXHJcbiAgICBjb25zb2xlLmxvZyhkcmFnQW5kRHJvcERpcmVjdGlvbilcclxuICBcclxuICAgIGlmKGNoZWNrUG9zaXRpb24oeCwgeSwgZHJhZ0FuZERyb3BEaXJlY3Rpb24sIHNoaXBzWzBdKSl7XHJcbiAgICBcclxuICAgICAgc2V0dXBUaGVHYW1lKHgsIHksIGRyYWdBbmREcm9wRGlyZWN0aW9uLCBzaGlwc1swXSlcclxuICBcclxuICAgICAgc2hpcHMuc2hpZnQoKVxyXG4gICAgICBkaXNwbGF5RHJhZ1NoaXBzKClcclxuXHJcbiAgICAgIGlmKHNoaXBzLmxlbmd0aCA9PT0gMCkgbWFrZVN0YXJ0QnRuQXZhaWxhYmxlKClcclxuICAgIH1cclxuICB9XHJcbn0pXHJcblxyXG5zZXR1cEJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIChlKSA9PiB7XHJcbiAgaWYoIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2hpcC1wYXJ0LW9uLWJvYXJkJykpe1xyXG4gICAgZHJhZ0FuZERyb3BDb29yZHMgPSBlLnRhcmdldC5kYXRhc2V0LmNvb3JkcyBcclxuICAgIGRyYWdBbmREcm9wRGlyZWN0aW9uID0gZS50YXJnZXQuY2xhc3NMaXN0XHJcbiAgfWVsc2V7XHJcbiAgICBkcmFnQW5kRHJvcENvb3JkcyA9IG51bGxcclxuICAgIGRyYWdBbmREcm9wRGlyZWN0aW9uID0gbnVsbFxyXG4gIH1cclxufSlcclxuXHJcbmRyYWdnZWRTaGlwcy5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZSkgPT4ge1xyXG4gIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XHJcbiAgY29uc29sZS5sb2coJ3lvdSBwaWNrZWQgbWUgdXAhJylcclxufSlcclxuXHJcblxyXG5kcmFnZ2VkU2hpcHMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcclxuICBkcmFnZ2VkU2hpcHMuY2xhc3NMaXN0LnRvZ2dsZSgnY29sJylcclxufSlcclxuXHJcbi8vICBcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5RHJhZ1NoaXBzID0gKCkgPT4ge1xyXG4gIGRyYWdnZWRTaGlwcy5pbm5lckhUTUwgPSAnJ1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwc1swXTsgaSsrKXtcclxuICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGBzaGlwLXBhcnRgKVxyXG4gICAgICBkcmFnZ2VkU2hpcHMuYXBwZW5kQ2hpbGQoZGl2KVxyXG5cclxuICAgIH1cclxuICAvLyBzaGlwcy5zaGlmdCgpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTZXR1cEJvYXJkID0gZ2FtZWJvYXJkID0+IHtcclxuICBzZXR1cEJvYXJkLmlubmVySFRNTCA9ICcnXHJcbiAgZ2FtZWJvYXJkLmZvckVhY2goKHJvdywgaSkgPT4ge1xyXG4gICAgcm93LmZvckVhY2goKGNlbGwsIGopID0+IHtcclxuICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGBwb3NpdGlvbmApXHJcbiAgICAgIGlmKGNlbGwgPT09IHRydWUpIGRpdi5jbGFzc0xpc3QuYWRkKGBzaGlwLXBhcnQtb24tYm9hcmRgKVxyXG4gICAgICBkaXYuc2V0QXR0cmlidXRlKFwiZGF0YS1jb29yZHNcIiwgYCR7aX0tJHtqfWApO1xyXG4gICAgICBzZXR1cEJvYXJkLmFwcGVuZENoaWxkKGRpdilcclxuICAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVCb2FyZCA9IGdhbWVib2FyZHNJbmZvICA9PiAge1xyXG4gICAgYm9hcmRzQWxsRE9NLmZvckVhY2goKGJvYXJkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGJvYXJkLmlubmVySFRNTCA9ICcnXHJcbiAgICAgICAgY29uc29sZS5sb2coZ2FtZWJvYXJkc0luZm8pXHJcbiAgICAgICAgZ2FtZWJvYXJkc0luZm9baW5kZXhdLmZvckVhY2goKHJvdywgaSkgPT4ge1xyXG4gICAgICAgICAgICByb3cuZm9yRWFjaCgoY2VsbCwgaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChgcG9zaXRpb25gKVxyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPT09IDAgJiYgY2VsbCA9PT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGB0aGVyZS1pcy1zaGlwYClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvb3Jkc1wiLCBgJHtpfS0ke2p9YCk7XHJcbiAgICAgICAgICAgICAgICBib2FyZC5hcHBlbmRDaGlsZChkaXYpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgIH0pXHJcbiAgICBcclxufVxyXG5cclxuY29uc3QgaGFuZGxlQ2xpY2sgPSAoY29vcmQpID0+IHtcclxuICAgIGxldCBjbGlja2VkQ29vcmRzID0gY29vcmQuZGF0YXNldC5jb29yZHNcclxuICAgIGxldCB4eSA9IGNsaWNrZWRDb29yZHMuc3BsaXQoJy0nKVxyXG4gICAgaWYoIWNvb3JkLmNsYXNzTGlzdC5jb250YWlucyhcImhpdFwiKSAmJiAhY29vcmQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWlzc1wiKSl7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHBsYXlQbGF5ZXIoeHkpXHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gXCJoaXRcIikge1xyXG4gICAgICAgICAgY29vcmQuY2xhc3NMaXN0LmFkZChcImhpdFwiKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb29yZC5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKVxyXG4gICAgICAgIH1cclxuICAgICAgICBnYW1lTG9vcCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGNvb3JkaW5hdGVzQm9hcmRDUFUgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2JvYXJkLWNwdSAucG9zaXRpb24nKVxyXG5cclxuICBleHBvcnQgY29uc3QgYm9hcmRDb29yZGluYXRlICA9IGJvYXJkID0+IHtcclxuICAgIGNvb3JkaW5hdGVzQm9hcmRDUFUgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2JvYXJkLWNwdSAucG9zaXRpb24nKVxyXG4gICAgY29vcmRpbmF0ZXNCb2FyZENQVS5mb3JFYWNoKGNvb3JkID0+IHtcclxuICAgICAgY29vcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVDbGljayhjb29yZCkpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgbGVmdEJvYXJkQXR0YWNrID0gKHJlc3VsdCwgeCAseSkgPT4ge1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2JvYXJkLXBsYXllciAucG9zaXRpb24nKV1cclxuICAgIGNvbnN0IGZvdW5kID0gY29vcmRpbmF0ZXMuZmluZChjZWxsID0+IGNlbGwuZGF0YXNldC5jb29yZHMgPT09IGAke3h9LSR7eX1gKVxyXG4gICAgaWYgKHJlc3VsdCA9PT0gXCJoaXRcIikge1xyXG4gICAgICAgIGZvdW5kLmNsYXNzTGlzdC5hZGQoXCJoaXRcIilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm91bmQuY2xhc3NMaXN0LmFkZChcIm1pc3NcIilcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdhbWVXb25CeSA9IHdpbm5lciA9PiB7XHJcbiAgICBhbGVydChgJHt3aW5uZXJ9IHdvbiB0aGUgZ2FtZWApXHJcbn0iLCJjb25zdCB7IGNyZWF0ZUJvYXJkLCBib2FyZENvb3JkaW5hdGUsIGxlZnRCb2FyZEF0dGFjaywgZ2FtZVdvbkJ5LCBjcmVhdGVTZXR1cEJvYXJkLCBkaXNwbGF5RHJhZ1NoaXBzLCBzaGlwcyB9ID0gcmVxdWlyZShcIi4vZGlzcGxheVwiKTtcclxuY29uc3QgR2FtZWJvYXJkID0gcmVxdWlyZShcIi4vZ2FtZWJvYXJkXCIpO1xyXG5jb25zdCBQbGF5ZXIgPSByZXF1aXJlKFwiLi9wbGF5ZXJcIik7XHJcblxyXG5sZXQgZ2FtZUVuZCA9IGZhbHNlXHJcblxyXG5jb25zdCBwbGF5ZXJCb2FyZCA9IEdhbWVib2FyZCgpO1xyXG5jb25zdCBjcHVCb2FyZCA9IEdhbWVib2FyZCgpO1xyXG5jb25zdCBwbGF5ZXIgPSBQbGF5ZXIoY3B1Qm9hcmQpO1xyXG5jb25zdCBjcHUgPSBQbGF5ZXIocGxheWVyQm9hcmQpO1xyXG5cclxuZGlzcGxheURyYWdTaGlwcygpO1xyXG5cclxuY3JlYXRlU2V0dXBCb2FyZChwbGF5ZXJCb2FyZC5ib2FyZClcclxuXHJcblxyXG5leHBvcnQgY29uc3QgbmV3R2FtZSA9ICgpID0+IHtcclxuICAgIGxldCBnYW1lRW5kID0gZmFsc2VcclxuXHJcbiAgICBzaGlwcyA9IFs1LDQsMywyLDFdICAgICAvL2Rpc3BsYXkuanNcclxuXHJcbiAgICBjb25zdCBwbGF5ZXJCb2FyZCA9IEdhbWVib2FyZCgpO1xyXG4gICAgY29uc3QgY3B1Qm9hcmQgPSBHYW1lYm9hcmQoKTtcclxuICAgIGNvbnN0IHBsYXllciA9IFBsYXllcihjcHVCb2FyZCk7XHJcbiAgICBjb25zdCBjcHUgPSBQbGF5ZXIocGxheWVyQm9hcmQpO1xyXG5cclxuICAgIGRpc3BsYXlEcmFnU2hpcHMoKTtcclxuXHJcbiAgICBjcmVhdGVTZXR1cEJvYXJkKHBsYXllckJvYXJkLmJvYXJkKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldHVwVGhlR2FtZSA9ICh4LCB5LCBkaXJlY3Rpb24sIHNpemUpID0+IHtcclxuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcCAoeCwgeSwgZGlyZWN0aW9uLCBzaXplKVxyXG4gICAgY3JlYXRlU2V0dXBCb2FyZChwbGF5ZXJCb2FyZC5ib2FyZClcclxuICAgIFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2hlY2tQb3NpdGlvbiA9ICh4LCB5LCBkcmFnQW5kRHJvcERpcmVjdGlvbiwgc2hpcCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2cocGxheWVyQm9hcmQuYm9hcmQpXHJcbiAgICBpZihwbGF5ZXJCb2FyZC5jaGVja0JvYXJkKHgsIHksIGRyYWdBbmREcm9wRGlyZWN0aW9uLCBzaGlwKSkgcmV0dXJuIHRydWVcclxuICAgIGVsc2UgcmV0dXJuIGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwbGFjZVNoaXBSYW5kb20gPSAoKSA9PiB7XHJcbiAgICBwbGF5ZXJCb2FyZC5ib2FyZFJlc2V0KClcclxuICAgIHBsYXllckJvYXJkLnJhbmRvbVNoaXBzKCk7XHJcbiAgICBjcmVhdGVTZXR1cEJvYXJkKHBsYXllckJvYXJkLmJvYXJkKVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHN0YXJ0R2FtZSA9ICgpID0+IHtcclxuICAgIC8vIGRvIG5vdCBkZWxldGVcclxuICAvLyAgcGxheWVyQm9hcmQucmFuZG9tU2hpcHMoKTtcclxuICAgIGNwdUJvYXJkLnJhbmRvbVNoaXBzKCk7XHJcblxyXG4gICAgY3JlYXRlQm9hcmQoW3BsYXllckJvYXJkLmJvYXJkLCBjcHVCb2FyZC5ib2FyZF0pO1xyXG4gICAgYm9hcmRDb29yZGluYXRlKGNwdUJvYXJkKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2FtZUxvb3AgPSAoKSA9PiB7XHJcbiAgICBpZihjcHVCb2FyZC5hbGxTdW5rKCkgPT09IHRydWUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdQbGF5ZXIgd29uJylcclxuICAgICAgICBnYW1lV29uQnkoJ1lvdScpXHJcbiAgICAgICAgZ2FtZUVuZCA9IHRydWVcclxuICAgIH1lbHNlIGlmIChwbGF5ZXJCb2FyZC5hbGxTdW5rKCkgPT09IHRydWUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdDUFUgd29uJylcclxuICAgICAgICBnYW1lV29uQnkoJ0NvbXB1dGVyJylcclxuICAgICAgICBnYW1lRW5kID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgcGxheUNQVSgpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwbGF5Q1BVID0gKCkgPT4ge1xyXG4gICAgaWYoIWdhbWVFbmQpe1xyXG4gICAgICAgIGxldCB7cmVzdWx0LCB4LCB5fSA9IGNwdS5hdHRhY2soKTtcclxuICAgICAgICBsZWZ0Qm9hcmRBdHRhY2socmVzdWx0LCB4ICwgeSlcclxuICAgICAgICAvLyBnYW1lTG9vcCgpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwbGF5UGxheWVyID0geHljb29yZHMgPT4ge1xyXG4gICAgbGV0IFt4LCB5XSA9IHh5Y29vcmRzXHJcbiAgICByZXR1cm4gY3B1Qm9hcmQucmVjZWl2ZUF0dGFjayh4LCB5KVxyXG59IiwiY29uc3QgU2hpcCA9IHJlcXVpcmUoXCIuL3NoaXBcIik7XHJcblxyXG5jb25zdCBHYW1lYm9hcmQgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3Qgc2hpcHMgPSBbXVxyXG5cclxuICAgIGNvbnN0IGJvYXJkID0gKCgpID0+IHtcclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IHJvdyA9IFtdO1xyXG4gICAgICAgICAgYXJyLnB1c2gocm93KTtcclxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xyXG4gICAgICAgICAgICByb3cucHVzaChmYWxzZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgIH0pKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gYm9hcmRSZXNldCAoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xyXG4gICAgICAgICAgICAgIGJvYXJkW2ldW2pdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL0kgaGF2ZSBub3QgdXNlZCBhcnJvdyBmdW5jdGlvbnMgaGVyZSwgIGJlY2F1c2UgdGhleSBkbyBub3QgaGF2ZSB0aGVpciBvd24gXCJ0aGlzXCJcclxuICAgIC8vYWRkaW5nIFwidGhpc1wiIHRvIHRoZSBmdW5jdGlvbiBpdCByZXR1cm5zIHRoZSBnbG9iYWwgb2JqZWN0LCBzbyB5b3UgY2FuIGNhbGwgYWZ0ZXIgdGhlIG1ldGhvcyBpbnNpZGUgR2FtZWJvYXJkXHJcbiAgICBmdW5jdGlvbiBwbGFjZVNoaXAgKHgsIHksIGRpcmVjdGlvbiwgc2l6ZSkgIHtcclxuICAgICAgICBjb25zdCBuZXdTaGlwID0gU2hpcChzaXplKVxyXG4gICAgICAgIGlmKGNoZWNrQm9hcmQoeCwgeSwgZGlyZWN0aW9uLCBzaXplKSl7IFxyXG4gICAgICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdoJyl7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSB4OyBpIDwgeCArIHNpemU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkW2ldW3ldID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NoaXAuY29vcmRzLnB1c2goW2kseV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1lbHNlIGlmIChkaXJlY3Rpb24gPT09ICd2Jyl7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSB5OyBqIDwgeSArIHNpemU7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkW3hdW2pdID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NoaXAuY29vcmRzLnB1c2goW3gsal0pXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZSByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgc2hpcHMucHVzaChuZXdTaGlwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWxpZFBvc2l0aW9uID0gKHgsIHksIGRpcmVjdGlvbiwgc2l6ZSkgPT4ge1xyXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gXCJoXCIgJiYgeCArIHNpemUgPiAxMCkgcmV0dXJuIGZhbHNlICAgICAgICAgIFxyXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gXCJ2XCIgJiYgeSArIHNpemUgPiAxMCkgcmV0dXJuIGZhbHNlIFxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZW1wdHlQb3NpdGlvbiA9ICh4LCB5LCBkaXJlY3Rpb24sIHNpemUpID0+IHtcclxuICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdoJyl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IHg7IGkgPCB4ICsgc2l6ZTsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGJvYXJkW2ldW3ldID09PSB0cnVlKSByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNlIGlmIChkaXJlY3Rpb24gPT09ICd2Jyl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IHk7IGogPCB5ICsgc2l6ZTsgaisrKXtcclxuICAgICAgICAgICAgICAgIGlmKGJvYXJkW3hdW2pdID09PSB0cnVlKSByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGVja0JvYXJkID0gKHgsIHksIGRpcmVjdGlvbiwgc2l6ZSkgPT4ge1xyXG5cclxuICAgICAgICBpZih4ID09PSAnZW1wdHknKXtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaTw9OTsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGo8PTk7IGorKylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJvYXJkW2ldW2pdID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWUgIC8vYm9hcmQgaXMgZW1wdHlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighdmFsaWRQb3NpdGlvbih4LCB5LCBkaXJlY3Rpb24sIHNpemUpKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighZW1wdHlQb3NpdGlvbih4LCB5LCBkaXJlY3Rpb24sIHNpemUpKSAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICBcclxuXHJcbiAgICAgICAgbGV0IGNoZWNrRW1wdHkgPSB0cnVlXHJcblxyXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ2gnKXtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IHg7IGk8eCtzaXplOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgaWYoYm9hcmRbaV1beV0gIT09IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0VtcHR5ID09PSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihjaGVja0VtcHR5ID09PSBmYWxzZSApIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICBlbHNlIHJldHVybiB0cnVlXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAndicpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yKGxldCBpID0geSA7IGk8eStzaXplOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgaWYoYm9hcmRbeF1baV0gIT09IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0VtcHR5ID09PSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihjaGVja0VtcHR5ID09PSBmYWxzZSApIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlY2VpdmVBdHRhY2sgKHgsIHkpIHtcclxuICAgICAgICBpZihib2FyZFt4XVt5XSA9PT0gdHJ1ZSl7IFxyXG4gICAgICAgICAgICAvLyBoaXRzKCkgZWwgYmFyY28gdG9jYWRvXHJcbiAgICAgICAgICAgIHNoaXBzLmZvckVhY2goc2hpcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBzaGlwLmNvb3Jkcy5mb3JFYWNoKGNvb3JkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZihjb29yZFswXSA9PSB4ICYmIGNvb3JkWzFdID09IHkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwLmhpdCgpICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkgICAgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGJvYXJkW3hdW3ldID0gJ2hpdCdcclxuICAgICAgICAgICAgcmV0dXJuICdoaXQnXHJcbiAgICAgICAgICAgIC8vIHJldHVybiAnaGl0J1xyXG4gICAgICAgIH1lbHNlIGlmKGJvYXJkW3hdW3ldID09PSBmYWxzZSl7XHJcbiAgICAgICAgICAgIGJvYXJkW3hdW3ldID0gJ21pc3MnXHJcbiAgICAgICAgICAgIHJldHVybiAnbWlzcydcclxuICAgICAgICB9ZWxzZSByZXR1cm4gdW5kZWZpbmVkXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsbFN1bmsgKCkge1xyXG4gICAgICAgIGxldCBpc0FueUZsb2F0aW5nID0gdHJ1ZVxyXG4gICAgICAgIHNoaXBzLmZvckVhY2goc2hpcCA9PiB7XHJcbiAgICAgICAgICAgIGlmKHNoaXAuaXNTdW5rKCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpc0FueUZsb2F0aW5nID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGlzQW55RmxvYXRpbmdcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmFuZG9tU2hpcHMgKCkge1xyXG4gICAgICAgIGxldCB4LCB5LCBkIFxyXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IFsnaCcsICd2J10sIHNpemUgPSBbMSwgMiwgMywgNCwgNV1cclxuICAgICAgICBmb3IobGV0IGk9MDsgaSA8IHNpemUubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXHJcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXHJcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMilcclxuICAgICAgICAgICAgfSB3aGlsZSAoIWNoZWNrQm9hcmQoeCwgeSwgZGlyZWN0aW9uW2RdLCBzaXplW2ldKSk7XHJcbiAgICAgICAgcGxhY2VTaGlwKHgsIHksIGRpcmVjdGlvbltkXSwgc2l6ZVtpXSlcclxuICAgICAgICB9ICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWxsU3VuayxcclxuICAgICAgICBib2FyZCxcclxuICAgICAgICBib2FyZFJlc2V0LFxyXG4gICAgICAgIGNoZWNrQm9hcmQsXHJcbiAgICAgICAgcGxhY2VTaGlwLFxyXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXHJcbiAgICAgICAgcmFuZG9tU2hpcHNcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHYW1lYm9hcmRcclxuXHJcblxyXG4iLCJjb25zdCBQbGF5ZXIgPSBib2FyZCA9PiB7XHJcblxyXG4gICAgY29uc3QgYWxsVGhlQ29vcmRzICA9ICgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcclxuICAgICAgICAgICAgYXJyLnB1c2goW2ksIGpdKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBjb25zdCBhdHRhY2tzQXZhaWxhYmxlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBhbGxUaGVDb29yZHMubGVuZ3RoXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlc3VsdCwgeCwgeVxyXG5cclxuICAgIGNvbnN0IHJhbmRvbU51bSA9ICgpID0+IHtcclxuICAgICAgICBpZihyZXN1bHQgPT09ICdoaXQnKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCBhbGwgYWRqYWNlbnQgY29vcmRzXHJcbiAgICAgICAgICAgIGNvbnN0IGFkamFjZW50Q29vcmRzID0gW107XHJcbiAgICAgICAgICAgIGlmICh4ID4gMCkgYWRqYWNlbnRDb29yZHMucHVzaChbeCAtIDEsIHldKTtcclxuICAgICAgICAgICAgaWYgKHggPCA5KSBhZGphY2VudENvb3Jkcy5wdXNoKFt4ICsgMSwgeV0pO1xyXG4gICAgICAgICAgICBpZiAoeSA+IDApIGFkamFjZW50Q29vcmRzLnB1c2goW3gsIHkgLSAxXSk7XHJcbiAgICAgICAgICAgIGlmICh5IDwgOSkgYWRqYWNlbnRDb29yZHMucHVzaChbeCwgeSArIDFdKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy8gZmlsdGVyIG91dCBjb29yZHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhdHRhY2tlZFxyXG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVBZGphY2VudENvb3JkcyA9IGFkamFjZW50Q29vcmRzLmZpbHRlcihjb29yZCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gY29vcmQ7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFsbFRoZUNvb3Jkcy5zb21lKGMgPT4gY1swXSA9PT0geCAmJiBjWzFdID09PSB5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBhdmFpbGFibGUgYWRqYWNlbnQgY29vcmRzLCBjaG9vc2Ugb25lIHJhbmRvbWx5XHJcbiAgICAgICAgICAgIGlmIChhdmFpbGFibGVBZGphY2VudENvb3Jkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgW2Nob3NlblgsIGNob3NlblldID0gYXZhaWxhYmxlQWRqYWNlbnRDb29yZHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXZhaWxhYmxlQWRqYWNlbnRDb29yZHMubGVuZ3RoKV07XHJcbiAgICAgICAgICAgICAgY29uc3QgY2hvc2VuSW5kZXggPSBhbGxUaGVDb29yZHMuZmluZEluZGV4KGNvb3JkID0+IGNvb3JkWzBdID09PSBjaG9zZW5YICYmIGNvb3JkWzFdID09PSBjaG9zZW5ZKTtcclxuICAgICAgICAgICAgICByZXR1cm4gY2hvc2VuSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxUaGVDb29yZHMubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zdCBzZWxlY3RlZEJ5UGxheWVyID0gKHgsIHkpID0+IHtcclxuICAgIC8vICAgICByZXR1cm4gYWxsVGhlQ29vcmRzLmZpbmQoY29vcmQgPT4gY29vcmRbMF0gPT09IHggJiYgY29vcmRbMV0gPT09IHkpXHJcbiAgICAgICAgXHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29uc3QgYXR0YWNrID0gKGNvb3JkcyA9IHJhbmRvbU51bSgpKSA9PiB7XHJcbiAgICAgICAgW3gseV0gPSBhbGxUaGVDb29yZHMuc3BsaWNlKGNvb3JkcywgMSlbMF1cclxuICAgICAgICByZXN1bHQgPSBib2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpXHJcbiAgICAgICAgcmV0dXJuIHtyZXN1bHQsIHgsIHl9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhdHRhY2tzQXZhaWxhYmxlLFxyXG4gICAgICAgIGF0dGFja1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllcjsiLCJjb25zdCBTaGlwID0gKHNoaXBMZW5ndGgpID0+IHtcclxuICAgIGxldCB0aW1lc0hpdCA9IDBcclxuICAgIGxldCBzdW5rID0gZmFsc2VcclxuICAgIGxldCBjb29yZHMgPSBbXSAgICAgLy9jb250YWlucyB0aGUgY29vcmRzIG9mIHRoaXMgc2hpcFxyXG5cclxuICAgIGZ1bmN0aW9uIGhpdCAoKSB7XHJcbiAgICAgICAgdGhpcy50aW1lc0hpdCsrO1xyXG4gICAgICAgIC8vdGltZXNIaXQrK1xyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNTdW5rICgpIHtcclxuICAgICAgICBpZihzaGlwTGVuZ3RoID09PSB0aGlzLnRpbWVzSGl0KSB7XHJcbiAgICAgICAgICAgIHN1bmsgPSB0cnVlXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4ge3RpbWVzSGl0LCBzdW5rLCBzaGlwTGVuZ3RoLCBoaXQsIGlzU3VuaywgY29vcmRzfVxyXG59XHJcblxyXG4vLyBjb25zdCBsb25nU2hpcCA9IFNoaXAoNSlcclxuLy8gY29uc29sZS5sb2cobG9uZ1NoaXAuaGl0KCkpXHJcbi8vIGNvbnNvbGUubG9nKGxvbmdTaGlwLmhpdCgpKVxyXG4vLyBjb25zb2xlLmxvZyhsb25nU2hpcC5oaXQoKSlcclxuLy8gY29uc29sZS5sb2cobG9uZ1NoaXAuaXNTdW5rKCkpXHJcbi8vIGNvbnNvbGUubG9nKGxvbmdTaGlwLmhpdCgpKVxyXG4vLyBjb25zb2xlLmxvZyhsb25nU2hpcC5pc1N1bmsoKSlcclxuLy8gY29uc29sZS5sb2cobG9uZ1NoaXAuaGl0KCkpXHJcbi8vIGNvbnNvbGUubG9nKGxvbmdTaGlwLmlzU3VuaygpKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTaGlwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld0dhbWVCdG4iLCJnZXRFbGVtZW50QnlJZCIsInJhbmRvbUJ0biIsInN0YXJ0QnRuIiwic3RhcnRTY3JlZW4iLCJvdmVybGF5IiwiYm9hcmRQbGF5ZXJET00iLCJib2FyZENQVURPTSIsInNldHVwQm9hcmQiLCJkcmFnZ2VkU2hpcHMiLCJib2FyZHNBbGxET00iLCJkcmFnQW5kRHJvcENvb3JkcyIsImRyYWdBbmREcm9wRGlyZWN0aW9uIiwic2hpcHMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwibWFrZVN0YXJ0QnRuQXZhaWxhYmxlIiwiYWRkIiwicHJldmVudERlZmF1bHQiLCJjb25zb2xlIiwibG9nIiwieCIsInkiLCJzcGxpdCIsInBhcnNlSW50IiwiY29udGFpbnMiLCJzaGlmdCIsImRpc3BsYXlEcmFnU2hpcHMiLCJkYXRhc2V0IiwiY29vcmRzIiwidG9nZ2xlIiwiaW5uZXJIVE1MIiwiZGl2IiwiY3JlYXRlU2V0dXBCb2FyZCIsImdhbWVib2FyZCIsImZvckVhY2giLCJyb3ciLCJjZWxsIiwiaiIsImNyZWF0ZUJvYXJkIiwiZ2FtZWJvYXJkc0luZm8iLCJib2FyZCIsImNvb3JkaW5hdGVzQm9hcmRDUFUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYm9hcmRDb29yZGluYXRlIiwiY29vcmQiLCJ4eSIsImhhbmRsZUNsaWNrIiwibGVmdEJvYXJkQXR0YWNrIiwiZm91bmQiLCJmaW5kIiwiZ2FtZVdvbkJ5Iiwid2lubmVyIiwiYWxlcnQiLCJHYW1lYm9hcmQiLCJQbGF5ZXIiLCJnYW1lRW5kIiwicGxheWVyQm9hcmQiLCJjcHVCb2FyZCIsImNwdSIsIm5ld0dhbWUiLCJzZXR1cFRoZUdhbWUiLCJkaXJlY3Rpb24iLCJzaXplIiwicGxhY2VTaGlwIiwiY2hlY2tQb3NpdGlvbiIsInNoaXAiLCJjaGVja0JvYXJkIiwicGxhY2VTaGlwUmFuZG9tIiwiYm9hcmRSZXNldCIsInJhbmRvbVNoaXBzIiwic3RhcnRHYW1lIiwiZ2FtZUxvb3AiLCJhbGxTdW5rIiwicGxheUNQVSIsImF0dGFjayIsInBsYXlQbGF5ZXIiLCJ4eWNvb3JkcyIsInJlY2VpdmVBdHRhY2siLCJTaGlwIiwiYXJyIiwibmV3U2hpcCIsInZhbGlkUG9zaXRpb24iLCJlbXB0eVBvc2l0aW9uIiwiaXNBbnlGbG9hdGluZyIsImlzU3VuayIsImhpdCIsImQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhbGxUaGVDb29yZHMiLCJhdHRhY2tzQXZhaWxhYmxlIiwiYWRqYWNlbnRDb29yZHMiLCJhdmFpbGFibGVBZGphY2VudENvb3JkcyIsImZpbHRlciIsInNvbWUiLCJjIiwiY2hvc2VuWCIsImNob3NlblkiLCJmaW5kSW5kZXgiLCJyYW5kb21OdW0iLCJzaGlwTGVuZ3RoIiwic3VuayIsInRpbWVzSGl0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIl0sInNvdXJjZVJvb3QiOiIifQ==